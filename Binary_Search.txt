void Binary_Search(int a[], int n, int &value_to_find, int &divide_number_to_2part, vector<int> &index_dup_contain)
{
	cout << "Input a number to find: ";
	cin >> value_to_find;
	cout << "div index: ";
	cin >> divide_number_to_2part;
	index_dup_contain.resize(0);
	if (checkvalueappear(a, n, value_to_find) == true)
	{
		if (value_to_find < a[divide_number_to_2part])
		{
			for (int i = 0; i < divide_number_to_2part; i++)
			{
				if (a[i] == value_to_find)
				{
					index_dup_contain.push_back(i);
				}
			}
		}
		else if (value_to_find > a[divide_number_to_2part])
		{
			for (int j = divide_number_to_2part + 1; j < n; j++)
			{
				if (value_to_find == a[j])
				{
					index_dup_contain.push_back(j);
				}
			}
		}
		else
		{
			index_dup_contain.push_back(divide_number_to_2part);		//return index of element in array equal with the 
			//do not return to the value_to_find because returned value is not the value, it returned the index of array that value of it equal with value_to_find.
			for (int i = 0; i < divide_number_to_2part; i++)
			{
				if (a[i] == value_to_find)
				{
					index_dup_contain.push_back(i);
				}
			}
			for (int j = divide_number_to_2part + 1; j < n; j++)
			{
				if (value_to_find == a[j])
				{
					index_dup_contain.push_back(j);
				}
			}
		}
	}
	else		//there is not element in array duplicate with the value want to find, or nothing can
	{
		cout << "There is no element in array have duplicate with this value." << endl;
	}
}